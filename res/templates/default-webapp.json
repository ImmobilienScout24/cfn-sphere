{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Basic set of resources for a standard web application. Contains one autoscaling group with launch config, ELB with optional HTTPS listener, CloudWatch Logs configuration. Located at https://git.rz.is/aws/is24-cfn-templates/",
  "Parameters": {
    "amiId": {
      "Description": "Mandatory: Id of the AMI that will be used to run ec2 instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern": "ami-[a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with ami- and can contain only alphanumeric characters"
    },
    "subnetIds": {
      "Description": "Mandatory: Subnet IDs",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Comma separated list of subnet ids, should contain subnet in all AZ of the region"
    },
    "vpcId": {
      "Description": "Mandatory: Virtual private cloud id",
      "Type": "String"
    },
    "stackName": {
      "Description": "Mandatory: Name of the wrapping stack",
      "Type": "String"
    },
    "keyName": {
      "Description": "Mandatory: SSH key pair name",
      "Type": "String"
    },
    "notificationEmail": {
      "Description": "Mandatory: Email address for notifications",
      "Type": "String"
    },
    "retentionTime": {
      "Description": "Log file retention in days",
      "Type": "String",
      "Default": "30"
    },
    "certName": {
      "Description": "Name of the SSL certificate, if empty no HTTPS listener will be created",
      "Type": "String",
      "Default": ""
    },
    "instanceType": {
      "Description": "Type of the instances, e.g. m3.medium",
      "Type": "String",
      "Default": "t2.micro"
    },
    "minSize": {
      "Description": "Minimum size of the autoscaling group",
      "Type": "String",
      "Default": "1"
    },
    "maxSize": {
      "Description": "Maximum size of the autoscaling group",
      "Type": "String",
      "Default": "2"
    },
    "desiredCapacity": {
      "Description": "Desired capacity of the autoscaling group",
      "Type": "String",
      "Default": "1"
    },
    "healthCheckURL": {
      "Description": "Health check path of the application used by the ELB",
      "Type": "String",
      "Default": "/"
    },
    "accessLoggingEnabled": {
      "Description": "Should the load balancer write access logs to a backet named like the stack?",
      "Type": "String",
      "Default": "true"
    }
  },
  "Conditions": {
    "useHttps": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {"Ref": "certName"},
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "launchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Ref": "amiId"
        },
        "InstanceType": {"Ref": "instanceType"},
        "IamInstanceProfile": {
          "Ref": "iamInstanceProfile"
        },
        "KeyName": {"Ref": "keyName"},
        "SecurityGroups": [
          {
            "Ref": "instanceSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#cloud-boothook",
                "#!/usr/bin/is24-aws-init",
                "is24_aws_stackname",
                { "Ref": "stackName" },
                "is24_aws_launchconfig",
                "launchConfiguration",
                "is24_aws_cloudwatch_loggroup",
                { "Ref": "logGroup" },
                "is24_aws_elb_name",
                { "Ref": "elb" },
                "is24_aws_autoscalinggroup_logical_id",
                "autoScalingGroup",
                "is24_aws_autoscaling_stackname",
                { "Ref": "AWS::StackName" }
              ]
            ]
          }
        }
      }
    },
    "autoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT20M",
          "WaitOnResourceSignals": true
        }
      },
      "Properties": {
        "TerminationPolicies": [
          "OldestLaunchConfiguration"
        ],
        "AvailabilityZones": {"Fn::GetAZs": ""},
        "Cooldown": "10",
        "DesiredCapacity": {"Ref": "desiredCapacity"},
        "MaxSize": {"Ref": "maxSize"},
        "MinSize": {"Ref": "minSize"},
        "HealthCheckGracePeriod": "600",
        "HealthCheckType": "ELB",
        "VPCZoneIdentifier": {
          "Ref": "subnetIds"
        },
        "LaunchConfigurationName": {
          "Ref": "launchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "elb"
          }
        ]
      }
    },
    "elb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": true,
        "AccessLoggingPolicy": {
          "EmitInterval": 5,
          "Enabled": { "Ref": "accessLoggingEnabled" },
          "S3BucketName": {
            "Ref": "s3LogBucket"
          },
          "S3BucketPrefix": "elb"
        },
        "Subnets": {
          "Ref": "subnetIds"
        },
        "SecurityGroups": [
          {
            "Ref": "elbSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "Protocol": "HTTP",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "HTTP",
            "InstancePort": "8080"
          },
          {
            "Fn::If": [
              "useHttps",
              {
                "Protocol": "HTTPS",
                "LoadBalancerPort": "443",
                "InstanceProtocol": "HTTP",
                "InstancePort": "8080",
                "SSLCertificateId": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {"Ref": "AWS::AccountId"},
                      ":server-certificate/",
                      {"Ref": "certName"}
                    ]
                  ]
                }
              },
              {"Ref": "AWS::NoValue"}
            ]
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "10",
          "Interval": "10",
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:8080",
                {"Ref": "healthCheckURL"}
              ]
            ]
          },
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        }
      }
    },
    "logGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Ref": "retentionTime"
        }
      }
    },
    "iamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "iamRole"
          }
        ]
      }
    },
    "iamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "awslogs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:Describe*",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:logs",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "log-group",
                        {
                          "Ref": "logGroup"
                        },
                        "*"
                      ]
                    ]
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "signal-elb-healthcheck",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Resource": [
                    "*"
                  ],
                  "Action": [
                    "elasticloadbalancing:DescribeInstanceHealth"
                  ],
                  "Effect": "Allow"
                }, {
                  "Resource": [
                    { "Fn::Join": [ ":", [
                      "arn:aws:cloudformation",
                      { "Ref": "AWS::Region" },
                      { "Ref": "AWS::AccountId" },
                      "*" ]
                    ] }
                  ],
                  "Action": [
                    "cloudformation:SignalResource",
                    "cloudformation:DescribeStacks"
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "elbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ELB",
        "VpcId": {
          "Ref": "vpcId"
        }
      }
    },
    "instanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "stack internal",
        "VpcId": {
          "Ref": "vpcId"
        }
      }
    },
    "sgIngressFromELB": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "instanceSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "8080",
        "ToPort": "8080",
        "SourceSecurityGroupId": {
          "Ref": "elbSecurityGroup"
        }
      }
    },
    "allowPingToInstances": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "instanceSecurityGroup"
        },
        "IpProtocol": "icmp",
        "FromPort": "-1",
        "ToPort": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "elbsgEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "elbSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "8080",
        "ToPort": "8080",
        "DestinationSecurityGroupId": {
          "Ref": "instanceSecurityGroup"
        }
      }
    },
    "elbHttpIngressFromEverywhere": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {"Ref": "elbSecurityGroup"},
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "elbHttpsIngressFromEverywhere": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "useHttps",
      "Properties": {
        "GroupId": {"Ref": "elbSecurityGroup"},
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "s3LogBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "stackName"
        },
        "AccessControl": "LogDeliveryWrite"
      }
    },
    "s3LogBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "s3LogBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": ["s3:PutObject"],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "s3LogBucket"
                    },
                    "/elb/AWSLogs/*"
                  ]
                ]
              },
              "Principal": {
                "AWS": [
                  "156460612806"
                ]
              }
            }
          ]
        }
      }
    },
    "notificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "notificationEmail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
    "ElbHealthyInstances": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "There should be at least as much healthy instances as defined by the minimum capacity of the auto scaling group",
        "MetricName": "HealthyHostCount",
        "Namespace": "AWS/ELB",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": {"Ref": "minSize"},
        "AlarmActions": [
          {
            "Ref": "notificationTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": {
              "Ref": "elb"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    }
  },
  "Outputs": {
    "launchConfiguration": {
      "Value": {"Ref": "launchConfiguration"},
      "Description": "reference to the created launch configuration"
    },
    "logGroup": {
      "Value": {"Ref": "logGroup"},
      "Description": "reference to the name of the cloudwatch loggroup"
    },
    "elbDnsName": {
      "Value": {
        "Fn::GetAtt": [
          "elb",
          "DNSName"
        ]
      },
      "Description": "DNS name of the created loadbalancer"
    },
    "iamRole": {
      "Value": {"Ref": "iamRole"},
      "Description": "reference to the created iamRole"
    },
    "instanceSecurityGroup": {
      "Value": {"Ref": "instanceSecurityGroup"},
      "Description": "Security group of the created EC2 instances"
    },
    "elbSecurityGroup": {
      "Value": {"Ref": "elbSecurityGroup"},
      "Description": "Security group of the created elastic load balancer"
    },
    "autoScalingGroup": {
      "Value": {"Ref": "autoScalingGroup"},
      "Description": "Auto scaling group"
    },
    "notificationTopic": {
      "Value": { "Ref": "notificationTopic" },
      "Description": "SNS notification topic that can be used for sending alarms"
    }
  }
}